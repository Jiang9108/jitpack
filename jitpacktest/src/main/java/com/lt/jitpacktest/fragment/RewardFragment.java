package com.lt.jitpacktest.fragment;import android.app.Dialog;import android.content.Context;import android.content.Intent;import android.graphics.Bitmap;import android.os.Build;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.BaseAdapter;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import androidx.annotation.RequiresApi;import androidx.fragment.app.Fragment;import com.lt.jitpacktest.R;import com.lt.jitpacktest.activity.YunBuRewardActivity;import com.lt.jitpacktest.activity.YunBuSearchActivity;import com.lt.jitpacktest.utils.HttpUtils;import com.lt.jitpacktest.utils.SessionSingleton;import com.lt.jitpacktest.utils.Utils;import com.lt.jitpacktest.xPullRefresh.XListView;import com.lt.jitpacktest.yunbuimageload.AsyncImageLoader;import com.lt.jitpacktest.yunbuimageload.FileCache;import com.lt.jitpacktest.yunbuimageload.MemoryCache;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.File;import java.math.BigDecimal;import java.util.HashMap;import java.util.Map;public class RewardFragment extends Fragment {    private View view;    private Context context;    public Dialog mLoading;    private XListView lv_reward;    private LinearLayout ll_reward_title_sousuo;    private TextView tv_reward_title_ty1, tv_reward_title_ty2, tv_reward_title_ty3, tv_reward_title_ty4;    private TextView tv_reward_title_ty1_zhishiqi, tv_reward_title_ty2_zhishiqi, tv_reward_title_ty3_zhishiqi, tv_reward_title_ty4_zhishiqi;    private RewardAdapter adapter;    private JSONArray rewardListArray;    private String rewardStatus;    private int page = 1, ISORNOSEARCH = 0;    private String rewardUrl, searchWord, token, chanelUserAccount;    private int showTypeReward = 0;    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN)    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        view = inflater.inflate(R.layout.fragment_yun_bu_reward, container, false);        context = getContext();        mLoading = Utils.createLoadingDialog(context, "正在加载......");        mLoading.setCancelable(true);        initview();        return view;    }    private void initview() {        lv_reward = view.findViewById(R.id.xlv_reward);        ll_reward_title_sousuo = view.findViewById(R.id.ll_reward_title_sousuo);        tv_reward_title_ty1 = view.findViewById(R.id.tv_reward_title_ty1);        tv_reward_title_ty2 = view.findViewById(R.id.tv_reward_title_ty2);        tv_reward_title_ty3 = view.findViewById(R.id.tv_reward_title_ty3);        tv_reward_title_ty4 = view.findViewById(R.id.tv_reward_title_ty4);        tv_reward_title_ty1_zhishiqi = view.findViewById(R.id.tv_reward_title_ty1_zhishiqi);        tv_reward_title_ty2_zhishiqi = view.findViewById(R.id.tv_reward_title_ty2_zhishiqi);        tv_reward_title_ty3_zhishiqi = view.findViewById(R.id.tv_reward_title_ty3_zhishiqi);        tv_reward_title_ty4_zhishiqi = view.findViewById(R.id.tv_reward_title_ty4_zhishiqi);        rewardListArray = new JSONArray();        try {            token = SessionSingleton.getInstance().AccountSingle.getString("token");            chanelUserAccount = SessionSingleton.getInstance().AccountSingle.getString("chanelUserAccount");            rewardUrl = SessionSingleton.getInstance().requestBaseUrl + "channelGetRewardListApi?";            String showTabSign = SessionSingleton.getInstance().AccountSingle.getString("showTabSign");            //showTabSign="游戏";            if (showTabSign.contains("悬赏")) {                showTypeReward = 1;            }        } catch (JSONException e) {            e.printStackTrace();        }        page = 1;        rewardStatus = "所有";        searchWord = "";        mLoading.show();        getRewardData(rewardStatus, page);        lv_reward.setPullRefreshEnable(true);        lv_reward.setPullLoadEnable(true);        adapter = new RewardAdapter(context);        lv_reward.setXListViewListener(new XListView.IXListViewListener() {            @Override            public void onRefresh() {                page = 1;                mLoading.show();                getRewardData(rewardStatus, page);                Load();            }            @Override            public void onLoadMore() {                page = page + 1;                mLoading.show();                getRewardData(rewardStatus, page);                Load();            }        });        lv_reward.setAdapter(adapter);        lv_reward.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                try {                    SessionSingleton.getInstance().rewardDetailsSingle = rewardListArray.getJSONObject(position - 1);                    Intent intent = new Intent(getActivity(), YunBuRewardActivity.class);                    intent.putExtra("REWARDTASKTYPE", "TASKLIST");                    startActivity(intent);                } catch (JSONException e) {                    e.printStackTrace();                }            }        });        ll_reward_title_sousuo.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent intent = new Intent(getActivity(), YunBuSearchActivity.class);                intent.putExtra("SEARCHTYPE", "reward");                startActivity(intent);            }        });        tv_reward_title_ty1.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                tv_reward_title_ty1.setTextColor(getResources().getColor(R.color.yunbu_textblack));                tv_reward_title_ty2.setTextColor(getResources().getColor(R.color.yunbu_textgray2));                tv_reward_title_ty3.setTextColor(getResources().getColor(R.color.yunbu_textgray2));                tv_reward_title_ty4.setTextColor(getResources().getColor(R.color.yunbu_textgray2));                tv_reward_title_ty1.setTextSize(17);                tv_reward_title_ty2.setTextSize(14);                tv_reward_title_ty3.setTextSize(14);                tv_reward_title_ty4.setTextSize(14);                tv_reward_title_ty1_zhishiqi.setVisibility(View.VISIBLE);                tv_reward_title_ty2_zhishiqi.setVisibility(View.GONE);                tv_reward_title_ty3_zhishiqi.setVisibility(View.GONE);                tv_reward_title_ty4_zhishiqi.setVisibility(View.GONE);                rewardStatus = "所有";                page = 1;                //快审  高额  简单 所有                mLoading.show();                getRewardData(rewardStatus, page);                adapter.notifyDataSetChanged();            }        });        tv_reward_title_ty2.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                tv_reward_title_ty1.setTextColor(getResources().getColor(R.color.yunbu_textgray2));                tv_reward_title_ty2.setTextColor(getResources().getColor(R.color.yunbu_textblack));                tv_reward_title_ty3.setTextColor(getResources().getColor(R.color.yunbu_textgray2));                tv_reward_title_ty4.setTextColor(getResources().getColor(R.color.yunbu_textgray2));                tv_reward_title_ty1.setTextSize(14);                tv_reward_title_ty2.setTextSize(17);                tv_reward_title_ty3.setTextSize(14);                tv_reward_title_ty4.setTextSize(14);                tv_reward_title_ty1_zhishiqi.setVisibility(View.GONE);                tv_reward_title_ty2_zhishiqi.setVisibility(View.VISIBLE);                tv_reward_title_ty3_zhishiqi.setVisibility(View.GONE);                tv_reward_title_ty4_zhishiqi.setVisibility(View.GONE);                rewardStatus = "简单";                page = 1;                mLoading.show();                getRewardData(rewardStatus, page);                adapter.notifyDataSetChanged();            }        });        tv_reward_title_ty3.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                tv_reward_title_ty1.setTextColor(getResources().getColor(R.color.yunbu_textgray2));                tv_reward_title_ty2.setTextColor(getResources().getColor(R.color.yunbu_textgray2));                tv_reward_title_ty3.setTextColor(getResources().getColor(R.color.yunbu_textblack));                tv_reward_title_ty4.setTextColor(getResources().getColor(R.color.yunbu_textgray2));                tv_reward_title_ty1.setTextSize(14);                tv_reward_title_ty2.setTextSize(14);                tv_reward_title_ty3.setTextSize(17);                tv_reward_title_ty4.setTextSize(14);                tv_reward_title_ty1_zhishiqi.setVisibility(View.GONE);                tv_reward_title_ty2_zhishiqi.setVisibility(View.GONE);                tv_reward_title_ty3_zhishiqi.setVisibility(View.VISIBLE);                tv_reward_title_ty4_zhishiqi.setVisibility(View.GONE);                rewardStatus = "快审";                page = 1;                mLoading.show();                getRewardData(rewardStatus, page);            }        });        tv_reward_title_ty4.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                tv_reward_title_ty1.setTextColor(getResources().getColor(R.color.yunbu_textgray2));                tv_reward_title_ty2.setTextColor(getResources().getColor(R.color.yunbu_textgray2));                tv_reward_title_ty3.setTextColor(getResources().getColor(R.color.yunbu_textgray2));                tv_reward_title_ty4.setTextColor(getResources().getColor(R.color.yunbu_textblack));                tv_reward_title_ty1.setTextSize(14);                tv_reward_title_ty2.setTextSize(14);                tv_reward_title_ty3.setTextSize(14);                tv_reward_title_ty4.setTextSize(17);                tv_reward_title_ty1_zhishiqi.setVisibility(View.GONE);                tv_reward_title_ty2_zhishiqi.setVisibility(View.GONE);                tv_reward_title_ty3_zhishiqi.setVisibility(View.GONE);                tv_reward_title_ty4_zhishiqi.setVisibility(View.VISIBLE);                rewardStatus = "高额";                page = 1;                mLoading.show();                getRewardData(rewardStatus, page);                adapter.notifyDataSetChanged();            }        });    }    private void Load() {        lv_reward.stopLoadMore();        lv_reward.stopRefresh();    }    public class RewardAdapter extends BaseAdapter {        private AsyncImageLoader imageLoader;//异步组件        private LayoutInflater inflater;        public RewardAdapter(Context context) {            inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);            MemoryCache mcache = new MemoryCache();//内存缓存            String paht = getActivity().getApplicationContext().getFilesDir().getAbsolutePath();            File cacheDir = new File(paht, "yunbucache");//缓存根目录            FileCache fcache = new FileCache(context, cacheDir, "yunbuimage");//文件缓存            imageLoader = new AsyncImageLoader(context, mcache, fcache);        }        @Override        public int getCount() {            return rewardListArray.length();        }        @Override        public Object getItem(int position) {            return position;        }        @Override        public long getItemId(int position) {            return position;        }        @Override        public View getView(int position, View convertView, ViewGroup parent) {            ViewHolder holder;            holder = new ViewHolder();            convertView = inflater.inflate(R.layout.item_yun_bu_game_type, null);            holder.iv_item_game_head = (ImageView) convertView.findViewById(R.id.iv_item_game_head);            holder.tv_item_game_title = (TextView) convertView.findViewById(R.id.tv_item_game_title);            holder.tv_item_game_msg = (TextView) convertView.findViewById(R.id.tv_item_game_msg);            holder.tv_item_game_money = (TextView) convertView.findViewById(R.id.tv_item_game_money);            holder.tv_item_game_day = (TextView) convertView.findViewById(R.id.tv_item_game_day);            try {                JSONObject single = rewardListArray.getJSONObject(position);                holder.tv_item_game_title.setText(single.getString("productName"));                holder.tv_item_game_day.setText("还剩" + single.getString("publicsurplusTimes") + "个");                holder.tv_item_game_msg.setText(single.getString("taskType"));                //double money = single.getDouble("productPrice") * controlMoneyScale;                double money = single.getDouble("productPrice");                double finalmoney = money - (money * SessionSingleton.getInstance().moneyScaleReward);                BigDecimal sharemal = new BigDecimal(finalmoney);                finalmoney = sharemal.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();                holder.tv_item_game_money.setText("+" + Utils.getDoubleString(finalmoney) + "元");                //异步加载图片，先从一级缓存、再二级缓存、最后网络获取图片                Bitmap bmp = imageLoader.loadBitmap(holder.iv_item_game_head, single.getString("logurl"));                if (bmp == null) {                    holder.iv_item_game_head.setImageResource(R.drawable.ic_load_iname);                } else {                    holder.iv_item_game_head.setImageBitmap(bmp);                }            } catch (Exception e) {                e.printStackTrace();            }            return convertView;        }        class ViewHolder {            TextView tv_item_game_title, tv_item_game_msg, tv_item_game_money, tv_item_game_day;            ImageView iv_item_game_head;        }    }    public void getRewardData(String taskLoadType, int pageIndex) {        Map<String, String> params = new HashMap<>();        params.put("chanelUserAccount", chanelUserAccount);        params.put("page", String.valueOf(pageIndex));        params.put("token", token);        params.put("type", "1");        params.put("taskLoadType", taskLoadType);        params.put("limit", "10");        HttpUtils.doHttpReqeust("POST", rewardUrl, params, new HttpUtils.StringCallback() {            @Override            public void onSuccess(String response) {                mLoading.dismiss();                try {                    JSONObject returnJSONObject = new JSONObject(response);                    if (returnJSONObject.getString("status").equals("success")) {                        JSONArray array = returnJSONObject.getJSONArray("data");                        if (page <= 1) {                            rewardListArray = array;                            if (SessionSingleton.getInstance().AccountSingle.getJSONArray("rewardRecommandArray").length() < 4) {                                if (showTypeReward == 1) {                                    JSONArray rewardRecommandArray = new JSONArray();                                    for (int i = 0; i < 4; i++) {                                        JSONObject object = array.getJSONObject(i);                                        rewardRecommandArray.put(object);                                    }                                    SessionSingleton.getInstance().AccountSingle.put("rewardRecommandArray", rewardRecommandArray);                                }                            }                        } else {                            for (int i = 0; i < array.length(); i++) {                                rewardListArray.put(array.getJSONObject(i));                            }                        }                    } else {                        Utils.showToast(context, returnJSONObject.getString("msg"));                    }                } catch (JSONException e) {                    e.printStackTrace();                }                adapter.notifyDataSetChanged();            }            @Override            public void onFaileure(int code, Exception e) {                e.printStackTrace();            }        });    }}